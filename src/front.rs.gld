# This file is generated by gilder. Do not edit it manually.
1739222553552993839
"[Spanned { node: Let([(Spanned { node: \"a\", span: 5..6 }, Some(Number))], [Spanned { node: Literal(Number(1.0)), span: 14..15 }]), span: 1..16 }, Spanned { node: Let([(Spanned { node: \"b\", span: 20..21 }, Some(Number))], [Spanned { node: Literal(Number(1.23)), span: 29..33 }]), span: 16..34 }, Spanned { node: Fn { name: Spanned { node: \"main\", span: 37..41 }, function: Function { type_params: [], parameters: [(\"a\", Number)], return_types: None, body: [] } }, span: 34..53 }, Spanned { node: Expression(Spanned { node: Call { function: Spanned { node: Variable(\"main\"), span: 54..58 }, arguments: [Spanned { node: Literal(Number(2.0)), span: 59..60 }] }, span: 54..61 }), span: 54..61 }]"
"[Spanned { node: Fn { name: Spanned { node: \"main\", span: 4..8 }, function: Function { type_params: [], parameters: [(\"a\", Number)], return_types: Some([Number]), body: [Spanned { node: Let([(Spanned { node: \"b\", span: 34..35 }, Some(Number))], [Spanned { node: Literal(Number(1.0)), span: 43..44 }]), span: 30..49 }, Spanned { node: Return([Spanned { node: Call { function: Spanned { node: Literal(String(\"__add\")), span: 0..0 }, arguments: [Spanned { node: Call { function: Spanned { node: Literal(String(\"__mul\")), span: 0..0 }, arguments: [Spanned { node: Variable(\"a\"), span: 56..57 }, Spanned { node: Literal(Number(2.0)), span: 60..61 }] }, span: 56..61 }, Spanned { node: Variable(\"b\"), span: 64..65 }] }, span: 56..65 }]), span: 49..66 }] } }, span: 1..67 }]"
"[Spanned { node: Fn { name: Spanned { node: \"main\", span: 4..8 }, function: Function { type_params: [], parameters: [(\"a\", Number)], return_types: Some([Number]), body: [Spanned { node: Expression(Spanned { node: Fn(Function { type_params: [], parameters: [(\"a\", Number)], return_types: Some([Number]), body: [Spanned { node: Return([Spanned { node: Call { function: Spanned { node: Literal(String(\"__mul\")), span: 0..0 }, arguments: [Spanned { node: Variable(\"a\"), span: 65..66 }, Spanned { node: Literal(Number(2.0)), span: 69..70 }] }, span: 65..70 }]), span: 58..75 }] }), span: 30..76 }), span: 30..76 }] } }, span: 1..78 }]"
"[Spanned { node: Fn { name: Spanned { node: \"main\", span: 4..8 }, function: Function { type_params: [], parameters: [], return_types: Some([Table(TypeTable { consts: [(Number(F64(1.0)), Bool), (Number(F64(2.0)), Bool)], number: None, string: Some(Number), bool: None, table: None, function: None })]), body: [Spanned { node: Return([Spanned { node: Table([(Literal(String(\"a\")), Spanned { node: Literal(Number(1.0)), span: 65..66 }), (Literal(String(\"b\")), Spanned { node: Literal(Number(2.0)), span: 79..80 }), (Literal(Number(1.0)), Spanned { node: Literal(Bool(true)), span: 90..94 }), (Literal(Number(2.0)), Spanned { node: Literal(Bool(false)), span: 104..109 })]), span: 52..116 }]), span: 45..117 }] } }, span: 1..118 }]"
"[Spanned { node: Let([(Spanned { node: \"a\", span: 5..6 }, None)], [Spanned { node: Index { table: Spanned { node: Index { table: Spanned { node: Table([]), span: 9..11 }, index: Spanned { node: Literal(Number(1.0)), span: 12..13 } }, span: 9..14 }, index: Spanned { node: Literal(Number(2.0)), span: 15..16 } }, span: 9..17 }]), span: 1..18 }]"
"[Spanned { node: Fn { name: Spanned { node: \"main\", span: 4..8 }, function: Function { type_params: [], parameters: [], return_types: None, body: [Spanned { node: If { condition: Spanned { node: Literal(Bool(true)), span: 20..24 }, then: [Spanned { node: Return([Spanned { node: Literal(Number(1.0)), span: 42..43 }]), span: 35..48 }], else_: [] }, span: 17..49 }, Spanned { node: If { condition: Spanned { node: Literal(Bool(true)), span: 57..61 }, then: [Spanned { node: Return([Spanned { node: Literal(Number(2.0)), span: 79..80 }]), span: 72..85 }], else_: [Spanned { node: Return([Spanned { node: Literal(Number(3.0)), span: 109..110 }]), span: 102..115 }] }, span: 54..116 }, Spanned { node: While { condition: Spanned { node: Literal(Bool(true)), span: 127..131 }, body: [Spanned { node: Return([Spanned { node: Literal(Number(4.0)), span: 149..150 }]), span: 142..155 }] }, span: 121..156 }] } }, span: 1..158 }]"
"[Spanned { node: Let([(Spanned { node: \"a\", span: 5..6 }, Some(Table(TypeTable { consts: [(String(\"f\"), Function([Number], [Number]))], number: None, string: None, bool: None, table: None, function: None })))], [Spanned { node: Table([(Literal(String(\"f\")), Spanned { node: Fn(Function { type_params: [], parameters: [(\"a\", Number)], return_types: Some([Number]), body: [Spanned { node: Return([Spanned { node: Call { function: Spanned { node: Literal(String(\"__mul\")), span: 0..0 }, arguments: [Spanned { node: Variable(\"a\"), span: 72..73 }, Spanned { node: Literal(Number(2.0)), span: 76..77 }] }, span: 72..77 }]), span: 65..82 }] }), span: 37..83 })]), span: 28..85 }]), span: 1..86 }]"
"[Spanned { node: Fn { name: Spanned { node: \"f\", span: 4..5 }, function: Function { type_params: [], parameters: [], return_types: None, body: [Spanned { node: Assignment { vars: [Index(Spanned { node: Index { table: Spanned { node: Table([(Literal(Number(1.0)), Spanned { node: Literal(Number(2.0)), span: 18..19 }), (Literal(Number(3.0)), Spanned { node: Literal(Number(4.0)), span: 24..25 })]), span: 14..26 }, index: Spanned { node: Literal(Number(1.0)), span: 27..28 } }, span: 14..29 }, Spanned { node: Literal(String(\"a\")), span: 30..31 })], exprs: [Spanned { node: Literal(Number(1.0)), span: 34..35 }] }, span: 14..36 }] } }, span: 1..37 }]"
"[Spanned { node: Fn { name: Spanned { node: \"f\", span: 14..15 }, function: Function { type_params: [], parameters: [], return_types: None, body: [] } }, span: 11..31 }]"
"[Spanned { node: Fn { name: Spanned { node: \"f\", span: 4..5 }, function: Function { type_params: [\"T\"], parameters: [(\"a\", Variable(\"T\"))], return_types: Some([Variable(\"T\")]), body: [Spanned { node: Return([Spanned { node: Variable(\"a\"), span: 33..34 }]), span: 26..35 }] } }, span: 1..36 }, Spanned { node: Let([(Spanned { node: \"a\", span: 41..42 }, Some(Number))], [Spanned { node: Call { function: Spanned { node: TypeResolve(Spanned { node: Variable(\"f\"), span: 50..51 }, [Number]), span: 50..56 }, arguments: [Spanned { node: Literal(Number(1.0)), span: 57..58 }] }, span: 50..59 }]), span: 37..60 }]"
"[Spanned { node: Expression(Spanned { node: Call { function: Spanned { node: Literal(String(\"__add\")), span: 0..0 }, arguments: [Spanned { node: Call { function: Spanned { node: Literal(String(\"__len\")), span: 0..0 }, arguments: [Spanned { node: Variable(\"x\"), span: 4..5 }] }, span: 0..5 }, Spanned { node: Literal(Number(1.0)), span: 8..9 }] }, span: 0..9 }), span: 0..9 }]"
"[Spanned { node: While { condition: Spanned { node: Literal(Bool(true)), span: 6..10 }, body: [Spanned { node: Break, span: 12..17 }] }, span: 0..18 }, Spanned { node: Break, span: 18..23 }]"
"[Spanned { node: Let([(Spanned { node: \"input\", span: 4..9 }, None)], [Spanned { node: Literal(Number(0.0)), span: 12..13 }]), span: 0..13 }]"
"[Spanned { node: Let([(Spanned { node: \"a\", span: 4..5 }, None)], [Spanned { node: Call { function: Spanned { node: Literal(String(\"__add\")), span: 0..0 }, arguments: [Spanned { node: Literal(String(\"abc\\\"'\\n\\r\\t\")), span: 8..23 }, Spanned { node: Literal(String(\"abc\\\"'\\n\\r\\t\")), span: 26..41 }] }, span: 8..41 }]), span: 0..42 }]"

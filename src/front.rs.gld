# This file is generated by gilder. Do not edit it manually.
1737199135708859465
"[Spanned { node: Let([(\"a\", Some(Number))], [Spanned { node: Literal(Number(1.0)), span: Span(14..15) }]), span: Span(1..16) }, Spanned { node: Let([(\"b\", Some(Number))], [Spanned { node: Literal(Number(1.23)), span: Span(29..33) }]), span: Span(16..34) }, Spanned { node: Fn { name: \"main\", function: Function { type_params: [], parameters: [(\"a\", Number)], return_types: None, body: [] } }, span: Span(34..53) }, Spanned { node: Expression(Spanned { node: Call { function: Spanned { node: Variable(\"main\"), span: Span(54..58) }, arguments: [Spanned { node: Literal(Number(2.0)), span: Span(59..60) }] }, span: Span(54..61) }), span: Span(54..61) }]"
"[Spanned { node: Fn { name: \"main\", function: Function { type_params: [], parameters: [(\"a\", Number)], return_types: Some([Number]), body: [Spanned { node: Let([(\"b\", Some(Number))], [Spanned { node: Literal(Number(1.0)), span: Span(43..44) }]), span: Span(30..49) }, Spanned { node: Return([Spanned { node: Call { function: Spanned { node: Literal(String(\"__add\")), span: Span(0..0) }, arguments: [Spanned { node: Call { function: Spanned { node: Literal(String(\"__mul\")), span: Span(0..0) }, arguments: [Spanned { node: Variable(\"a\"), span: Span(56..57) }, Spanned { node: Literal(Number(2.0)), span: Span(60..61) }] }, span: Span(56..61) }, Spanned { node: Variable(\"b\"), span: Span(64..65) }] }, span: Span(56..65) }]), span: Span(49..66) }] } }, span: Span(1..67) }]"
"[Spanned { node: Fn { name: \"main\", function: Function { type_params: [], parameters: [(\"a\", Number)], return_types: Some([Number]), body: [Spanned { node: Expression(Spanned { node: Fn(Function { type_params: [], parameters: [(\"a\", Number)], return_types: Some([Number]), body: [Spanned { node: Return([Spanned { node: Call { function: Spanned { node: Literal(String(\"__mul\")), span: Span(0..0) }, arguments: [Spanned { node: Variable(\"a\"), span: Span(65..66) }, Spanned { node: Literal(Number(2.0)), span: Span(69..70) }] }, span: Span(65..70) }]), span: Span(58..75) }] }), span: Span(30..76) }), span: Span(30..76) }] } }, span: Span(1..78) }]"
"[Spanned { node: Fn { name: \"main\", function: Function { type_params: [], parameters: [], return_types: Some([Table(TypeTable { consts: [(Number(F64(1.0)), Bool), (Number(F64(2.0)), Bool)], number: None, string: Some(Number), bool: None, table: None, function: None })]), body: [Spanned { node: Return([Spanned { node: Table([(Literal(String(\"a\")), Spanned { node: Literal(Number(1.0)), span: Span(65..66) }), (Literal(String(\"b\")), Spanned { node: Literal(Number(2.0)), span: Span(79..80) }), (Literal(Number(1.0)), Spanned { node: Literal(Bool(true)), span: Span(90..94) }), (Literal(Number(2.0)), Spanned { node: Literal(Bool(false)), span: Span(104..109) })]), span: Span(52..116) }]), span: Span(45..117) }] } }, span: Span(1..118) }]"
"[Spanned { node: Let([(\"a\", None)], [Spanned { node: Index { table: Spanned { node: Index { table: Spanned { node: Table([]), span: Span(9..11) }, index: Spanned { node: Literal(Number(1.0)), span: Span(12..13) } }, span: Span(9..14) }, index: Spanned { node: Literal(Number(2.0)), span: Span(15..16) } }, span: Span(9..17) }]), span: Span(1..18) }]"
"[Spanned { node: Fn { name: \"main\", function: Function { type_params: [], parameters: [], return_types: None, body: [Spanned { node: If { condition: Spanned { node: Literal(Bool(true)), span: Span(20..24) }, then: [Spanned { node: Return([Spanned { node: Literal(Number(1.0)), span: Span(42..43) }]), span: Span(35..48) }], else_: [] }, span: Span(17..49) }, Spanned { node: If { condition: Spanned { node: Literal(Bool(true)), span: Span(57..61) }, then: [Spanned { node: Return([Spanned { node: Literal(Number(2.0)), span: Span(79..80) }]), span: Span(72..85) }], else_: [Spanned { node: Return([Spanned { node: Literal(Number(3.0)), span: Span(109..110) }]), span: Span(102..115) }] }, span: Span(54..116) }, Spanned { node: While { condition: Spanned { node: Literal(Bool(true)), span: Span(127..131) }, body: [Spanned { node: Return([Spanned { node: Literal(Number(4.0)), span: Span(149..150) }]), span: Span(142..155) }] }, span: Span(121..156) }] } }, span: Span(1..158) }]"
"[Spanned { node: Let([(\"a\", Some(Table(TypeTable { consts: [(String(\"f\"), Function([Number], [Number]))], number: None, string: None, bool: None, table: None, function: None })))], [Spanned { node: Table([(Literal(String(\"f\")), Spanned { node: Fn(Function { type_params: [], parameters: [(\"a\", Number)], return_types: Some([Number]), body: [Spanned { node: Return([Spanned { node: Call { function: Spanned { node: Literal(String(\"__mul\")), span: Span(0..0) }, arguments: [Spanned { node: Variable(\"a\"), span: Span(72..73) }, Spanned { node: Literal(Number(2.0)), span: Span(76..77) }] }, span: Span(72..77) }]), span: Span(65..82) }] }), span: Span(37..83) })]), span: Span(28..85) }]), span: Span(1..86) }]"
"[Spanned { node: Fn { name: \"f\", function: Function { type_params: [], parameters: [], return_types: None, body: [Spanned { node: Assignment { vars: [Index(Spanned { node: Index { table: Spanned { node: Table([(Literal(Number(1.0)), Spanned { node: Literal(Number(2.0)), span: Span(18..19) }), (Literal(Number(3.0)), Spanned { node: Literal(Number(4.0)), span: Span(24..25) })]), span: Span(14..26) }, index: Spanned { node: Literal(Number(1.0)), span: Span(27..28) } }, span: Span(14..29) }, Spanned { node: Literal(String(\"a\")), span: Span(30..31) })], exprs: [Spanned { node: Literal(Number(1.0)), span: Span(34..35) }] }, span: Span(14..36) }] } }, span: Span(1..37) }]"
"[Spanned { node: Fn { name: \"f\", function: Function { type_params: [], parameters: [], return_types: None, body: [] } }, span: Span(11..31) }]"
"[Spanned { node: Fn { name: \"f\", function: Function { type_params: [\"T\"], parameters: [(\"a\", Variable(\"T\"))], return_types: Some([Variable(\"T\")]), body: [Spanned { node: Return([Spanned { node: Variable(\"a\"), span: Span(33..34) }]), span: Span(26..35) }] } }, span: Span(1..36) }, Spanned { node: Let([(\"a\", Some(Number))], [Spanned { node: Call { function: Spanned { node: TypeResolve(Spanned { node: Variable(\"f\"), span: Span(50..51) }, [Number]), span: Span(50..56) }, arguments: [Spanned { node: Literal(Number(1.0)), span: Span(57..58) }] }, span: Span(50..59) }]), span: Span(37..60) }]"
"[Spanned { node: Expression(Spanned { node: Call { function: Spanned { node: Literal(String(\"__add\")), span: Span(0..0) }, arguments: [Spanned { node: Call { function: Spanned { node: Literal(String(\"__len\")), span: Span(0..0) }, arguments: [Spanned { node: Variable(\"x\"), span: Span(4..5) }] }, span: Span(0..5) }, Spanned { node: Literal(Number(1.0)), span: Span(8..9) }] }, span: Span(0..9) }), span: Span(0..9) }]"
"[Spanned { node: While { condition: Spanned { node: Literal(Bool(true)), span: Span(6..10) }, body: [Spanned { node: Break, span: Span(12..17) }] }, span: Span(0..18) }, Spanned { node: Break, span: Span(18..23) }]"
"[Spanned { node: Let([(\"input\", None)], [Spanned { node: Literal(Number(0.0)), span: Span(12..13) }]), span: Span(0..13) }]"
"[Spanned { node: Let([(\"a\", None)], [Spanned { node: Call { function: Spanned { node: Literal(String(\"__add\")), span: Span(0..0) }, arguments: [Spanned { node: Literal(String(\"abc\\\"'\\n\\r\\t\")), span: Span(8..23) }, Spanned { node: Literal(String(\"abc\\\"'\\n\\r\\t\")), span: Span(26..41) }] }, span: Span(8..41) }]), span: Span(0..42) }]"

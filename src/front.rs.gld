# This file is generated by gilder. Do not edit it manually.
1732627415659533023
"[Let([(\"a\", Some(Number))], [Literal(Number(1.0))]), Let([(\"b\", Some(Number))], [Literal(Number(1.23))]), Fn { name: \"main\", function: Function { parameters: [(\"a\", Number)], return_types: None, body: [] } }, Expression(Call { function: Variable(\"main\"), arguments: [Literal(Number(2.0))] })]"
"[Fn { name: \"main\", function: Function { parameters: [(\"a\", Number)], return_types: Some([Number]), body: [Let([(\"b\", Some(Number))], [Literal(Number(1.0))]), Return([Call { function: Literal(String(\"__add\")), arguments: [Call { function: Literal(String(\"__mul\")), arguments: [Variable(\"a\"), Literal(Number(2.0))] }, Variable(\"b\")] }])] } }]"
"[Fn { name: \"main\", function: Function { parameters: [(\"a\", Number)], return_types: Some([Number]), body: [Expression(Fn(Function { parameters: [(\"a\", Number)], return_types: Some([Number]), body: [Return([Call { function: Literal(String(\"__mul\")), arguments: [Variable(\"a\"), Literal(Number(2.0))] }])] }))] } }]"
"[Fn { name: \"main\", function: Function { parameters: [], return_types: Some([Table(TypeTable { consts: [(Number(F64(1.0)), Bool), (Number(F64(2.0)), Bool)], number: None, string: Some(Number), bool: None, table: None, function: None })]), body: [Return([Table([(Literal(String(\"a\")), Literal(Number(1.0))), (Literal(String(\"b\")), Literal(Number(2.0))), (Literal(Number(1.0)), Literal(Bool(true))), (Literal(Number(2.0)), Literal(Bool(false)))])])] } }]"
"[Let([(\"a\", None)], [Index { table: Index { table: Table([]), index: Literal(Number(1.0)) }, index: Literal(Number(2.0)) }])]"
"[Fn { name: \"main\", function: Function { parameters: [], return_types: None, body: [If { condition: Literal(Bool(true)), then: [Return([Literal(Number(1.0))])], else_: [] }, If { condition: Literal(Bool(true)), then: [Return([Literal(Number(2.0))])], else_: [Return([Literal(Number(3.0))])] }, While { condition: Literal(Bool(true)), body: [Return([Literal(Number(4.0))])] }] } }]"
"[Let([(\"a\", Some(Table(TypeTable { consts: [(String(\"f\"), Function([Number], [Number]))], number: None, string: None, bool: None, table: None, function: None })))], [Table([(Literal(String(\"f\")), Fn(Function { parameters: [(\"a\", Number)], return_types: Some([Number]), body: [Return([Call { function: Literal(String(\"__mul\")), arguments: [Variable(\"a\"), Literal(Number(2.0))] }])] }))])])]"
"[Fn { name: \"f\", function: Function { parameters: [], return_types: None, body: [Assignment { vars: [Index(Index { table: Table([(Literal(Number(1.0)), Literal(Number(2.0))), (Literal(Number(3.0)), Literal(Number(4.0)))]), index: Literal(Number(1.0)) }, Literal(String(\"a\")))], exprs: [Literal(Number(1.0))] }] } }]"
"[Fn { name: \"f\", function: Function { parameters: [], return_types: None, body: [] } }]"
